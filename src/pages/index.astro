---
import CodeEditor from "../components/CodeEditor.svelte";
import Layout from "../layouts/Layout.astro";

const posts = await Astro.glob("../pages/**/*.md");
const results = posts.map((post) => {
	const { rawContent, compiledContent } = post;

	const compiled = compiledContent();
	const raw = rawContent();

	const rawCodePattern = /```(?<language>\w*)(\n)?(?<code>[^`]*)```/gs;
	const compiledCodePattern = /<pre.*<\/pre>/;

	const codeBlocks = [...raw.matchAll(rawCodePattern)].map(
		(m) =>
			({
				...m.groups,
			} as { language?: string; code?: string })
	);
	const nonCodeBlocksCompiled = compiled.split(compiledCodePattern);

	return { nonCodeBlocksCompiled, codeBlocks };
});
---

<Layout title="Welcome to Astro." lang="en">
	<main class="mt-6 flex flex-col gap-6 mx-auto max-w-4xl px-6">
		<h1 class="text-3xl font-bold">Interactive javascript cheatsheet</h1>

		<!-- <section>
			<h2 class="text-xl font-bold">Basics</h2>
			<div class="flex flex-col gap-2">
				<div>
					You can print text to screen using the function <code
						>console.log()</code
					>
				</div>
				<CodeEditor
					code="console.log('hello word');"
					client:only="svelte"
				/>
			</div>
		</section> -->

		<section class="prose max-w-none prose-h2:mb-2">
			{
				results.flatMap(({ nonCodeBlocksCompiled, codeBlocks }) => {
					const nodes = nonCodeBlocksCompiled.flatMap(
						(nonCodeBlock, i) => {
							const result = [
								<Fragment set:html={nonCodeBlock} />,
							];

							const codeBlock = codeBlocks[i];
							if (codeBlock) {
								const { code, language } = codeBlock;
								result.push(
									<CodeEditor
										code={code ?? ""}
										language={language}
										client:only="svelte"
									/>
								);
							}

							return result;
						}
					);

					return nodes;
				})
			}
		</section>
	</main>
</Layout>

<style>
	.ultra-height {
		height: 3000px;
	}
</style>
